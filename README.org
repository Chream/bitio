* BITIO: A Common Lisp library for processing octet streams as bit streams.

This library can currently only provide READING stream of bits. Later
I'll add WRITING a stream of bits.

Reading bits as a bit stream is a funny business and requires a bit of
demonstration (no pun intended) of the edge cases and structural format
of how the bits are layed out on disk, in memory, and in multi-part integers.

Before getting to nitty gritty about the API and how it works, here is a
quick exmple with no explanation about how it works, only what it does.

* A fast example.

#+BEGIN_SRC common-lisp
;; Suppose we want to read a binary octet stream where we must read in order:
;; 32 bits as a signed integer in little endian format, then
;; 16 bits as a signed integer in big endian format, then
;; 3 bits as an unsigned integer, then
;; 8 bits as an unsigned integer, then
;; 5 bits as an unsigned integer, then
;; read a number of octets denoted by the 8-bit number,
;; for a total of 8 + N bytes read.

;; Usually, to implement the 3/8/5 bit reads, you'd read 2 bytes,
;; then do a pile of bit masking/shifting/anding, etc in order to
;; retrive the values you desire.  You would also implicitly assume
;; some bit orderings too while doing the masking. Here is a
;; possible (of several, actually) rendering of the above in bitio:

(with-open-file (fin (asdf:system-relative-pathname :bitio "binfile")
                     :direction :input
                     :element-type '(unsigned-byte 8)
                     :if-does-not-exist :error)
  ;; wrap fin stream with a bitio stream.
  (let ((bitio (make-bitio fin #'read-byte)))
    (let ((32-bits (bitio:bit-read-integer bitio :unsignedp NIL))
          (16-bits (bitio:bit-read-integer bitio :num-bytes 2 :byte-endian :be
                                                 :unsignedp NIL))
          (3-bits (bitio:bit-read-integer bitio :num-bytes 1 :byte-width 3))
          (8-bits (bitio:bit-read-integer bitio :num-bytes 1))
          (5-bits (bitio:bit-read-integer bitio :num-bytes 1 :byte-width 5))
          (seq (make-array 8-bit :element-type '(unsigned-byte 8)))
          (num-read (bitio:bit-read-bytes bitio seq :be 8)))

      (format t "Do something with the read data values....~%")

      ))
#+END_SRC


* Bit Stream Representation
** Canonical Form of a Set of Bits
BITIO uses unsigned integers to represent a set of ordered raw
bits in CL memory.

The following representation is both the "written on paper"
representation and also the in memory represetation of the bits in
CL memory. For N-bits in an ordered set of bits, we have:

|---------+---------+---------+-----+-------+-------|
| MSBit   |         |         |     |       | LSBit |
|---------+---------+---------+-----+-------+-------|
| 2^{N-1} | 2^{N-2} | 2^{N-3} | ... | 2^{1} | 2^{0} |
|---------+---------+---------+-----+-------+-------|
| 0       |       1 |       0 | ... |     1 | 1     |
|---------+---------+---------+-----+-------+-------|

Suppose we have an 8-bit ordered bit set represented by the
unsigned integer #b01010011 in canonical form. The MSBit is the
left most 0 and the LSBit is the right most 1.

In BITIO, the unsigned integer representing the raw bits and the
count of those bits are often found together in the API. This
allows is to know that we are dealing with a bit set of N bits,
even if all of those bits are 0.

The ordering aspect arises in that we can only append/take bits from the
MSBit or the LSBit side of the bit set in canonical form.

** Octet Stream Source for Bits
BITIO is a stream that explicity wraps another stream. Let's call
this other stream S. S *must* have the type (UNSIGNED-BYTE 8) and
hence will supply 8-bit unsigned integers.

Here is an abstract representation of S where the Head column is
the octet about to be read from the octet stream, then, Next Octet
is the next octet read, and so on, and Remaining Octets is all of
the rest of the ordered octets in stream S, as expected.

| Head | Next Octet | Next Octet | Remaining Octets |
|------+------------+------------+------------------|
| #x33 | #xAB       | #x4D       | ...              |

BITIO is agnostic about the streams it wraps, since upon
construction of a BITIO instance you must supply the stream being
wrapped and the functions for reading and writing that are
associated with the wrapped stream.

A more useful manner to think about the octet stream is that each
(UNSIGNED-BYTE 8) octet is automatically in a canonical form for a
8-bit unsigned integer. It is infact the form that all modern OSes
and hardware will read an octet stream from memory, network, or
storage. The MSBit is the leftmost bit, and the LSBit is the
rightmost bit.

| Head       | Next Octet | Next Octet | Remaining Octets |
|------------+------------+------------+------------------|
| #b00110011 | #b10101011 | #b01001101 | ...              |

From this convenient representation, we now describe how to read
individual bits from it.

** Reading from BITIO
*** Bit Reading
*** Integer Reading
** Writing to BITIO
Writing bits to the stream is not implemented at this time. It will be
implemented in a future revision of BITIO.
*** Bit Writing
TODO
*** Integer Writing
TODO
** API Summary
